{"version":3,"sources":["components/Post/Post.js","components/Backdrop/Backdrop.js","components/Popup/Popup.js","containers/Content/Content.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["posts","props","className","onClick","popup","title","author","createDate","backdrop","show","close","nextProps","nextState","this","children","Fragment","style","transform","opacity","text","href","link","Component","React","memo","decodeHtml","html","txt","document","createElement","innerHTML","value","Content","state","items","page","more","showPopup","popupTitle","popupBody","popupLink","callApiHandler","axios","get","then","response","setState","concat","data","has_more","showItems","map","i","push","Post","key","question_id","showPopupHandler","body","owner","display_name","Date","creation_date","toLocaleDateString","console","log","closePopupHandler","parse","loadMore","hasMore","loader","useWindow","index","layout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e3620853.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Posts.css';\r\n\r\nconst posts = (props) => (\r\n    <div className=\"posts\" onClick={props.popup}>\r\n        <h4>Title: {props.title}</h4>\r\n        <p>Author: {props.author} | Created on: {props.createDate}</p>\r\n    </div>\r\n);\r\n\r\nexport default posts;","import React from 'react';\r\nimport './Backdrop.css'\r\n\r\nconst backdrop = (props) => (\r\n    props.show ? <div className=\"Backdrop\" onClick={props.close}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React, { Component } from 'react';\r\nimport './Popup.css';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\n\r\nclass popup extends Component{\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return nextProps.show !== this.props.show || nextProps.children !== this.props.children;\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Backdrop show={this.props.show} close={this.props.close}/>\r\n                <div \r\n                className=\"Popup\"\r\n                style={{\r\n                    transform: this.props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                    opacity: this.props.show ? '1' : '0'\r\n                }}\r\n                >\r\n                <h2>{this.props.title}</h2><br/>\r\n                <div className=\"text\">\r\n                {this.props.text}\r\n                </div><br/>\r\n                <a className=\"link\" href={this.props.link}>See Original Post Here</a>\r\n            </div>\r\n            </React.Fragment>   \r\n        );\r\n    }\r\n} \r\n\r\nexport default React.memo(popup);\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Post from '../../components/Post/Post';\r\nimport Popup from '../../components/Popup/Popup';\r\nimport parse from 'html-react-parser';\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport './Content.css';\r\n\r\nfunction decodeHtml(html) {\r\n    var txt = document.createElement(\"textarea\");\r\n    txt.innerHTML = html;\r\n    return txt.value;\r\n}\r\n\r\nclass Content extends Component{\r\n    state = {\r\n        items: [],\r\n        page: 1,\r\n        more: true,\r\n        showPopup: false,\r\n        popupTitle: null,\r\n        popupBody: null,\r\n        popupLink: null\r\n    }\r\n\r\n    componentDidMount(){   \r\n        this.callApiHandler();\r\n    }\r\n\r\n    callApiHandler = () => {\r\n        if(this.state.more){\r\n        axios.get(`https://api.stackexchange.com/2.2/questions?page=${this.state.page}&order=desc&sort=activity&site=stackoverflow&filter=!)EhuYxkLaV80I3JcPIkXewNs.Rqes*tW0rLKA1muNEXq9mkTr`)\r\n        .then( response => {\r\n            this.setState({items: this.state.items.concat(response.data.items), page: response.data.page + 1 , more: response.data.has_more});\r\n        });\r\n        }\r\n    }\r\n\r\n    showItems = () => {\r\n        var items = [];\r\n        this.state.items.map((i) =>\r\n          items.push(\r\n            <Post key={i.question_id} popup={() => this.showPopupHandler(i.title, i.body, i.link)} title= {decodeHtml(i.title)} author={i.owner.display_name} createDate={new Date(i.creation_date * 1000).toLocaleDateString()}/>\r\n          )\r\n        );\r\n        console.log(items);\r\n        return items;\r\n    }\r\n\r\n    closePopupHandler = () =>{\r\n        this.setState({showPopup:false});\r\n    }\r\n\r\n    showPopupHandler = (title, body, link) => {\r\n        this.setState({showPopup: true, popupTitle: title, popupBody: body, popupLink: link});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"content\">\r\n                <Popup show= {this.state.showPopup} close={this.closePopupHandler} title={decodeHtml(this.state.popupTitle)} text={parse(this.state.popupBody+'')} link={this.state.popupLink} />\r\n                {(this.state.items) ?\r\n                <InfiniteScroll\r\n                loadMore={this.callApiHandler}\r\n                hasMore={this.state.more}\r\n                loader={<div className=\"loader\"> Loading... </div>}\r\n                useWindow={false}\r\n                >\r\n                {this.state.items.map((i, index) =>\r\n                    <Post key={index} popup={() => this.showPopupHandler(i.title, i.body, i.link)} title= {decodeHtml(i.title)} author={i.owner.display_name} createDate={new Date(i.creation_date * 1000).toLocaleDateString()}/>\r\n                )}\r\n              </InfiniteScroll> : null }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport Content from '../../containers/Content/Content';\r\nimport './Layout.css';\r\n\r\nconst layout = () => (\r\n    <div className=\"layout\">\r\n        <h1 className=\"heading\">Stack Overflow Queries</h1>\r\n        <Content/>\r\n    </div>\r\n);\r\n\r\nexport default layout;","import React from 'react';\nimport './App.css';\nimport Layout from './components/Layout/Layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}